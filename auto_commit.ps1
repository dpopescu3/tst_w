param(
  [string]$RepoRoot,    
  [string]$TargetName,  
  [string]$DestDir     
)

Set-StrictMode -Version Latest
$ErrorActionPreference = 'Stop'

function Write-Info($msg)  { Write-Host "[auto_commit] $msg" }
function Git-Avail() {
  if (Get-Command git -ErrorAction SilentlyContinue) { return $true }
  $candidates = @(
    "$Env:ProgramFiles\Git\cmd\git.exe",
    "$Env:ProgramFiles\Git\bin\git.exe",
    "$Env:ProgramFiles(x86)\Git\cmd\git.exe",
    "$Env:ProgramFiles(x86)\Git\bin\git.exe"
  )
  foreach ($p in $candidates) {
    if (Test-Path $p) {
      $env:PATH = (Split-Path $p) + ";" + $env:PATH
      if (Get-Command git -ErrorAction SilentlyContinue) { return $true }
    }
  }
  return $false
}

if ([string]::IsNullOrWhiteSpace($RepoRoot)) { $RepoRoot = (Get-Location).Path }
if ([string]::IsNullOrWhiteSpace($DestDir))  { $DestDir  = $RepoRoot }
Set-Location -LiteralPath $RepoRoot

if (-not (Git-Avail)) {
  Write-Error "Git not found on PATH. Install Git for Windows or add it to PATH."
}

$freshInit = $false
if (-not (Test-Path ".git")) {
  Write-Info "No git repo found. Initializing one..."
  git init | Out-Null
  git config user.name  "Student Name"
  git config user.email "student@example.com"

  if (-not (Test-Path ".gitignore")) {
    @(
      "# Recommended ignores for Qt student projects",
      "/build/",
      "*.exe",
      "*.app/",
      ".qtc_clangd/",
      "output/"  
    ) -join "`r`n" | Out-File -FilePath ".gitignore" -Encoding utf8
  }

  git add -A
  git commit -m "Initial commit (autogenerated)" | Out-Null
  $freshInit = $true
  Write-Info "Fresh repo initialized; running app once and committing."
}

$watchCandidates = @(
  "Sources\perfect.cpp", "Sources\soundex.cpp",
  "perfect.cpp", "soundex.cpp"
)
$watch = @()
foreach ($w in $watchCandidates) { if (Test-Path $w) { $watch += $w } }

if ($watch.Count -eq 0) {
  Write-Info "No watched cpp files found; will always run."
} else {
  Write-Info ("Watching: " + ($watch -join ", "))
}

$headExists = $false
git rev-parse --verify HEAD *> $null
if ($LASTEXITCODE -eq 0) { $headExists = $true }

if ($headExists -and -not $freshInit -and $watch.Count -gt 0) {
  git diff --quiet HEAD -- $watch
  if ($LASTEXITCODE -eq 0) {
    Write-Info "cpps unchanged, skipping app launch + commit."
    exit 0
  }
}

$counterFile = ".autocommit_counter.txt"
if (Test-Path $counterFile) {
  $raw = (Get-Content $counterFile -ErrorAction SilentlyContinue | Select-Object -First 1)
  if ($raw -match '^\d+$') { $count = [int]$raw } else { $count = 0 }
} else {
  $count = 0
}
$count++
Set-Content -Path $counterFile -Value $count

$outputDir  = Join-Path $RepoRoot "output"
New-Item -ItemType Directory -Force -Path $outputDir | Out-Null
$outputFile = Join-Path $outputDir ("welcome_output_{0}.txt" -f $count)

$exePath = Join-Path $DestDir ("{0}.exe" -f $TargetName)
if (-not (Test-Path $exePath)) {
  $cand = Get-ChildItem -Path $RepoRoot -Filter ("{0}.exe" -f $TargetName) -Recurse -ErrorAction SilentlyContinue | Select-Object -First 1
  if ($cand) { $exePath = $cand.FullName }
}
if (-not (Test-Path $exePath)) {
  Write-Error "Executable not found: $exePath"
}

$runner = Join-Path $env:TEMP ("run_autocommit_{0}.ps1" -f ([guid]::NewGuid().ToString("N")))
$runnerContent = @"
`$ErrorActionPreference = 'Stop'
`$env:SCREENSHOT_MODE = '1'
Start-Transcript -Path "$outputFile" -IncludeInvocationHeader -Force
Write-Host "Launching tests... (this window will stay open after the app exits)"
Write-Host "Executable: $exePath`n"

# Run the app
& "$exePath"
`$code = `$LASTEXITCODE
Write-Host "`n[auto_commit] App exited with code `$code."

Write-Host "`nPress Enter to finish and close this window..."
[void](Read-Host)

Stop-Transcript
exit `$code
"@
$runnerContent | Out-File -FilePath $runner -Encoding utf8

$psi = New-Object System.Diagnostics.ProcessStartInfo
$psi.FileName        = "powershell.exe"
$psi.Arguments       = "-NoProfile -ExecutionPolicy Bypass -NoExit -File `"$runner`""
$psi.WorkingDirectory = $RepoRoot
$psi.UseShellExecute = $true
$psi.WindowStyle     = 'Normal'

$p = [System.Diagnostics.Process]::Start($psi)
$p.WaitForExit()
$exit = $p.ExitCode
if ($exit -ne 0) { Write-Info "App exited with code $exit" }

if (-not (Test-Path $outputFile)) {
  Write-Error "App output not captured. Aborting commit."
}

$timestamp    = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$commitSource = Split-Path -Leaf (Get-Location)

git add -A
git add -f "$outputFile" | Out-Null
git add "$counterFile" "auto_commit.ps1" | Out-Null

git commit -m ("Auto-commit #{0} from {1} at {2}" -f $count, $commitSource, $timestamp) 2>$null
if ($LASTEXITCODE -ne 0) {
  Write-Info "Nothing to commit."
  exit 0
}

$hasOrigin = (git remote 2>$null | Select-String -SimpleMatch 'origin')
if ($hasOrigin) {
  try { git push -u origin HEAD } catch { Write-Info "Push failed (continuing)." }
} else {
  Write-Info "No 'origin' remote configured; skipping push."
}
